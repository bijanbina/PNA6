#! /bin/bash

source setup_variables.sh

CURRENT_DIR=$(pwd)
# printf "Change dir to petalinux & Source setting.sh?[y/N]: "
# read response

# if [ "$response" = "y" ]; then
cd "$PETALINUX_INSTALL_DIR"
source settings.sh
cd "$RUN_PETALINUX_PROJECT"

while true; do
	echo "-------------------------------------"
	echo "1 - Config PetaLinux"
	echo "2 - Build $RUN_PETALINUX_PROJECT"
	echo "3 - Package & boot on board"
	echo "4 - Reboot if bitfile program failed"
	echo "5 - Attach USB-IP Device"
	echo "6 - Remote Package and boot"
	echo "7 - Make .BIN files for SD"
	echo "0 - Exit"
	echo "-------------------------------------"
	read response
	if [[ "$response" == *"1"* ]]; then
		printf "Configure Hardware?[y/N]: "
		read config_response
		if [ "$config_response" = "y" ]; then
			#petalinux-config --oldconfig --get-hw-description="$ADI_HDL_PROJECT/projects/fft_fast_sqrt/zc702/fft_zc702.sdk"
			petalinux-config --oldconfig --get-hw-description="$ADI_HDL_PROJECT/projects/ettus/e310/ettus_e310.sdk"
		else
			petalinux-config
		fi
	fi
	if [[ "$response" == *"2"* ]]; then
		petalinux-build
	fi
	if [[ "$response" == *"3"* ]]; then
		petalinux-package --prebuilt --fpga images/linux/system.bit --force; petalinux-boot --jtag --prebuilt 3 -v; petalinux-boot --jtag --fpga --bitstream images/linux/system.bit
	fi
	if [[ "$response" == *"4"* ]]; then
		petalinux-boot --jtag --fpga --bitstream images/linux/system.bit
	fi
	if [[ "$response" == *"5"* ]]; then
		printf "Probe VHCI-HCD?[y/N]: "
		read usb_response
		if [ "$usb_response" = "y" ]; then
			sudo modprobe vhci-hcd
		fi
		/usr/lib/linux-tools/4.15.0-23-generic/usbip list -r 192.168.1.122
		sudo /usr/lib/linux-tools/4.15.0-23-generic/usbip attach -r 192.168.1.122 -b 1-3
#		sudo /usr/lib/linux-tools/4.15.0-23-generic/usbip attach -r 192.168.1.122 -b 1-14
	fi
	if [[ "$response" == *"6"* ]]; then
		petalinux-package --prebuilt --fpga images/linux/system.bit --force;
		cd "$CURRENT_DIR"
		cp Petalinux/zc702.tcl "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT/"
		cd "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT/"
		export PATH="$PATH:$XILINX_INSTALL_DIR/Vivado/$XILINX_VERSION/bin"
		xsdb -eval "source zc702.tcl"
	fi
	if [[ "$response" == *"7"* ]]; then
		petalinux-package --boot --fsbl images/linux/zynq_fsbl.elf --fpga images/linux/system.bit --u-boot --force
		
		echo "-------------------------------------"
		printf "Enter SD location to copy image: "
		read sd_loc_response
		
		if [ -z "$sd_loc_response" ]; then
			echo "response was empty, image created but not copy to SD"
			echo "Be careful to copy BOOT.BIN & image.ub from petalinux/images,"
			echo "copy pna-startup.sh script from github/petalinux/pna-startup/files"
			echo "or from petalinux/project-spec/meta-user/recipes-apps/pna-startup/files"
		else
			if [ -d "$sd_loc_response" ]; then
				rm "$sd_loc_response/BOOT.BIN"
				rm "$sd_loc_response/image.ub"
				rm "$sd_loc_response/pna-ip"
				cp "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT/images/linux/BOOT.BIN" "$sd_loc_response"
				cp "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT/images/linux/image.ub" "$sd_loc_response"
				cp "$CURRENT_DIR/Petalinux/pna-startup/files/pna-ip" "$sd_loc_response"
			else
				echo "SD location not found, image created but not copy to SD"
				echo "Be careful to copy BOOT.BIN & image.ub from petalinux/images,"
				echo "copy pna-startup.sh script from github/petalinux/pna-startup/files"
				echo "or from petalinux/project-spec/meta-user/recipes-apps/pna-startup/files"
			fi
		fi
	fi
	if [[ "$response" == *"0"* ]]; then
		break
	fi
done
# fi
