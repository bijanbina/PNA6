#! /bin/bash

source setup_variables.sh

PNA_IP='192.168.1.180'
PNA_PASS="root"

CURRENT_DIR=$(pwd)
# printf "Change dir to petalinux & Source setting.sh?[y/N]: "
# read response

# if [ "$response" = "y" ]; then
cd "$PETALINUX_INSTALL_DIR"

current_args=( "$@" )
set --   # clear arguments for settings.sh
source settings.sh
set -- "${current_args[@]}"  # Restore arguments

# Modify MetaAdi to be compatible with petalinux project
ARG1="$1"
while true; do
	if [ -z "$ARG1" ]; then
		echo "Project List: [ pna6 | zc702-fft | e310 ]"
		printf "Enter Project Name: "
		read ARG1
		continue
	fi
	
	if [ "$ARG1" = "p" ] || [ "$ARG1" = "pna6" ] || [ "$ARG1" = "pna" ]; then
		PROJECT_NAME="pna6"
		RUN_PETALINUX_PROJECT="fft_zc702_linux"
	elif [ "$ARG1" = "z" ] || [ "$ARG1" = "zc702" ] || [ "$ARG1" = "zc702-fft" ]; then
		PROJECT_NAME="zc702-fft"
		RUN_PETALINUX_PROJECT="fft_zc702_linux"
	elif [ "$ARG1" = "e" ] || [ "$ARG1" = "e310" ] || [ "$ARG1" = "ettus" ]; then
		PROJECT_NAME="e310"
		RUN_PETALINUX_PROJECT="fft_usrp_linux"
	else
		echo "Project Name is not valid, try again."
		ARG1=""
		continue
	fi
	
	NODASH_NAME=$(echo "$PROJECT_NAME" | tr '-' '_')
	DEVICE_TREE_BB="$META_ADI_PROJECT/meta-adi-xilinx/recipes-bsp/device-tree/device-tree.bbappend"
	sed -i 's/^KERNEL_DTB = .*/KERNEL_DTB = "zynq-'"$PROJECT_NAME"'"/' "$DEVICE_TREE_BB"
	KERNEL_BB="$META_ADI_PROJECT/meta-adi-xilinx/recipes-kernel/linux/linux-xlnx_%.bbappend"
	sed -i 's/^KBUILD_DEFCONFIG_zynq = .*/KBUILD_DEFCONFIG_zynq = "zynq_'"$NODASH_NAME"'_defconfig"/' "$KERNEL_BB"
	break
done

cd "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT"
echo "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT"

while true; do
	echo "-------------------------------------"
	echo "1 - Config PetaLinux"
	echo "2 - Build $RUN_PETALINUX_PROJECT"
	echo "3 - Package & boot on board"
	echo "4 - Reboot if bitfile program failed"
	echo "5 - Attach USB-IP Device"
	echo "6 - Remote Package and boot"
	echo "7 - Make .BIN files for SD"
	echo "8 - Send elf to SD"
	echo "9 - Program Online"
	echo "0 - Exit"
	echo "-------------------------------------"
	read response
	if [[ "$response" == *"1"* ]]; then
		echo "----------------------Config PetaLinux---------------------"
		printf "Configure Hardware?[y/N]: "
		read config_response
		cd "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT"
		if [ "$config_response" = "y" ]; then
			#petalinux-config --oldconfig --get-hw-description="$ADI_HDL_PROJECT/projects/fft_fast_sqrt/zc702/fft_zc702.sdk"
			petalinux-config --oldconfig --get-hw-description="$ADI_HDL_PROJECT/projects/ettus/e310/ettus_e310.sdk"
		else
			petalinux-config
		fi
	fi
	if [[ "$response" == *"2"* ]]; then
		echo "-----------------Build $RUN_PETALINUX_PROJECT-----------------"
		cd "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT"
		petalinux-build
	fi
	if [[ "$response" == *"3"* ]]; then
		echo "------------------Package & boot on board------------------"
		cd "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT"
		petalinux-package --prebuilt --fpga images/linux/system.bit --force 
		petalinux-boot --jtag --prebuilt 3 -v
		petalinux-boot --jtag --fpga --bitstream images/linux/system.bit
	fi
	if [[ "$response" == *"4"* ]]; then
		echo "-------------Reboot if bitfile program failed--------------"
		cd "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT"
		petalinux-boot --jtag --fpga --bitstream images/linux/system.bit
	fi
	if [[ "$response" == *"5"* ]]; then
		echo "-------------------Attach USB-IP Device--------------------"
		printf "Probe VHCI-HCD?[y/N]: "
		read usb_response
		if [ "$usb_response" = "y" ]; then
			sudo modprobe vhci-hcd
		fi
		/usr/lib/linux-tools/4.15.0-23-generic/usbip list -r 192.168.1.122
		sudo /usr/lib/linux-tools/4.15.0-23-generic/usbip attach -r 192.168.1.122 -b 1-3
#		sudo /usr/lib/linux-tools/4.15.0-23-generic/usbip attach -r 192.168.1.122 -b 1-14
	fi
	if [[ "$response" == *"6"* ]]; then
		echo "------------------Remote Package and boot------------------"
		cd "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT"
		petalinux-package --prebuilt --fpga images/linux/system.bit --force;
		cd "$CURRENT_DIR"
		cp Petalinux/zc702.tcl "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT/"
		cd "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT/"
		export PATH="$PATH:$XILINX_INSTALL_DIR/Vivado/$XILINX_VERSION/bin"
		xsdb -eval "source zc702.tcl"
	fi
	if [[ "$response" == *"7"* ]]; then
		echo "------------------Make .BIN files for SD-------------------"
		cd "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT"
		petalinux-package --boot --fsbl images/linux/zynq_fsbl.elf --fpga images/linux/system.bit --u-boot --force
		
		sd_loc_response=$(zenity --file-selection --directory --title="Select SD-Card directory")
		case $? in
			0)
				rm "$sd_loc_response/BOOT.BIN"
				rm "$sd_loc_response/image.ub"
				rm "$sd_loc_response/pna_ip"
				rm "$sd_loc_response/fft_zc702_linux.elf"
				rm "$sd_loc_response/tx_filter.ftr"
				cp "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT/images/linux/BOOT.BIN" "$sd_loc_response"
				cp "$PETALINUX_INSTALL_DIR/$RUN_PETALINUX_PROJECT/images/linux/image.ub" "$sd_loc_response"
#				cp "$CURRENT_DIR/Petalinux/pna-startup/files/pna_ip" "$sd_loc_response"
				cp "$CURRENT_DIR/Petalinux/pna-iio/files/tx_filter.ftr" "$sd_loc_response"
				cp "$GIT_SDK_PETALINUX_PROJECT/Debug/fft_zc702_linux.elf" "$sd_loc_response"
				if [ "$PROJECT_NAME" = "pna6" ]; then
					printf "192.168.1.120" > "$sd_loc_response/pna_ip"
				elif [ "$PROJECT_NAME" = "zc702-fft" ]; then
					printf "192.168.1.150" > "$sd_loc_response/pna_ip"
				elif [ "$PROJECT_NAME" = "e310" ]; then
					printf "192.168.1.180" > "$sd_loc_response/pna_ip"
				fi;;
			1)
				echo "response is empty, image created but not copied to SD"
				echo "Be careful to copy:"
				echo "- BOOT.BIN & image.ub in petalinux/images,"
				echo "- elf in SDK/Debug"
				echo "- tx_filter in github/petalinux/pna-iio/files"
				echo "- pna_ip in github/petalinux/pna-startup/files";;
		
		   -1)
				echo "An unexpected error has occurred, image created but not copied to SD"
				echo "Be careful to copy:"
				echo "- BOOT.BIN & image.ub in petalinux/images,"
				echo "- elf in SDK/Debug"
				echo "- tx_filter in github/petalinux/pna-iio/files"
				echo "- pna_ip in github/petalinux/pna-startup/files";;
		esac
	fi
	if [[ "$response" == *"8"* ]]; then
		echo "----------------------Send elf to SD-----------------------"
		PNA_SDCARD=/mnt/sdcard
		PNA_HOME=/home/root
		sshpass -p $PNA_PASS fssh root@$PNA_IP "mount /dev/mmcblk0p1 $PNA_SDCARD"
		sshpass -p $PNA_PASS fscp "$GIT_SDK_PETALINUX_PROJECT/Debug/fft_zc702_linux.elf" root@$PNA_IP:$PNA_SDCARD
		sshpass -p $PNA_PASS fscp "$CURRENT_DIR/Petalinux/pna-iio/files/tx_filter.ftr" root@$PNA_IP:$PNA_SDCARD
		sshpass -p $PNA_PASS fscp "$CURRENT_DIR/Petalinux/pna-iio/files/tx_filter.ftr" root@$PNA_IP:$PNA_HOME
		sshpass -p $PNA_PASS fssh root@$PNA_IP "cp $PNA_SDCARD/fft_zc702_linux.elf $PNA_HOME"
		sshpass -p $PNA_PASS fssh root@$PNA_IP "umount $PNA_SDCARD"
	fi
	if [[ "$response" == *"9"* ]]; then
		echo "----------------------Program Online-----------------------"
		PNA_FIRMWARE_DIR="/lib/firmware"
		PNA_FPGA_MAN="/sys/class/fpga_manager/fpga0"
		DATE_DIR=`date +"%y%m%d"`
		if [ ! -d "$BITSTREAM_DIR" ]; then
			mkdir "$VERSION_CONTROL_DIR"
			mkdir "$BITSTREAM_DIR"
		fi
		
		printf "Enter name of HDL project?[fft_fast_sqrt]: "
		read hdl_response
		
		if [ -z "$hdl_response" ]; then
			hdl_response="fft_fast_sqrt"
		fi
		
		BITFILE="$ADI_HDL_PROJECT/projects/$hdl_response/zc702/fft_zc702.runs/impl_1/system_top.bit"
		
		if [ ! -f "$BITFILE" ]; then
			echo "bitfile not found, path $BITFILE not exist"
			continue
		fi
		
		BIT_DIR_NEW="$BITSTREAM_DIR/$DATE_DIR""_""$hdl_response"
		
		mkdir "$BIT_DIR_NEW"
		cp "$CURRENT_DIR/Petalinux/system_top.bif" "$BIT_DIR_NEW"
		cp "$BITFILE" "$BIT_DIR_NEW"
		cd "$BIT_DIR_NEW"
		
		bootgen -image system_top.bif -arch zynq -o system_top.bin -w
		
		sshpass -p $PNA_PASS fssh root@$PNA_IP "mkdir $PNA_FIRMWARE_DIR"
		sshpass -p $PNA_PASS fscp "system_top.bin" root@$PNA_IP:"$PNA_FIRMWARE_DIR"
		sshpass -p $PNA_PASS fssh root@$PNA_IP "echo 0 > $PNA_FPGA_MAN/flags"
		sshpass -p $PNA_PASS fssh root@$PNA_IP "echo system_top.bin > $PNA_FPGA_MAN/firmware"
		
	fi
	if [[ "$response" == *"0"* ]]; then
		break
	fi
done
# fi
